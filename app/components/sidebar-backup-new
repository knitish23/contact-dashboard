"use client";

import { useState } from "react";
import {
  ChevronRight,
  BookLock,
  Radar,
  Users,
  GitCompareArrows,
  BarChart3,
  User,
  PhoneCall,
  Mail,
  Sparkles,
  Star,
  Zap,
} from "lucide-react";

interface Contact {
  pic: string;
  name: string;
  title: string;
}

type SidebarItem = string | Contact;

interface SidebarSection {
  [key: string]: SidebarItem[];
}

interface SidebarProps {
  onSelectContact: (contact: Contact) => void;
}

type SidebarContent = string[] | SidebarSection;

const sidebarContent: Record<string, SidebarContent> = {
  dashboard: ["Overview", "Monitoring", "Logs"],
  "all-contacts": {
    "New Contacts": [
      {
        pic: "https://randomuser.me/api/portraits/men/5.jpg",
        name: "Gregory Clark",
        title: "Manager",
      },
      {
        pic: "https://randomuser.me/api/portraits/men/6.jpg",
        name: "George Allen",
        title: "Broker",
      },
      {
        pic: "https://randomuser.me/api/portraits/women/5.jpg",
        name: "Megan Brooks",
        title: "Analyst",
      },
      {
        pic: "https://randomuser.me/api/portraits/men/7.jpg",
        name: "Logan Smith",
        title: "Manager",
      },
      {
        pic: "https://randomuser.me/api/portraits/women/8.jpg",
        name: "Abigail Green",
        title: "Investor",
      },
      {
        pic: "https://randomuser.me/api/portraits/men/9.jpg",
        name: "Morgan Lee",
        title: "Investor",
      },
      {
        pic: "https://randomuser.me/api/portraits/women/6.jpg",
        name: "Regina Adams",
        title: "Assistant",
      },
      {
        pic: "https://randomuser.me/api/portraits/women/7.jpg",
        name: "Angela Grant",
        title: "Appraiser",
      },
    ],
    "Favorite Contacts": [
      {
        pic: "https://randomuser.me/api/portraits/men/1.jpg",
        name: "Douglas Brown",
        title: "Manager",
      },
      {
        pic: "https://randomuser.me/api/portraits/men/2.jpg",
        name: "Edgar White",
        title: "Investor",
      },
      {
        pic: "https://randomuser.me/api/portraits/women/1.jpg",
        name: "Emma Johnson",
        title: "Investor",
      },
      {
        pic: "https://randomuser.me/api/portraits/men/5.jpg",
        name: "Liam Wright",
        title: "Assistant",
      },
    ],
  },
  roles: ["Admin", "Editor", "Viewer"],
  "access-control": ["Permissions", "Audit Logs"],
  activity: ["Recent Activities", "System Events"],
  analytics: ["Traffic", "Reports", "Conversion"],
  support: ["Tickets", "Live Chat", "FAQs"],
  messages: ["Inbox", "Sent", "Spam"],
};

type SidebarKey = keyof typeof sidebarContent;

export default function Sidebar({ onSelectContact = () => {} }: SidebarProps) {
  const [active, setActive] = useState<SidebarKey>("all-contacts");
  // Initialize with "New Contacts" open by default for demonstration
  const [openDropdowns, setOpenDropdowns] = useState<Record<string, boolean>>({
    "New Contacts": true,
    "Favorite Contacts": false
  });
  const [isCollapsed, setIsCollapsed] = useState(false);

  const toggleDropdown = (key: string) => {
    setOpenDropdowns((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const toggleSidebar = () => setIsCollapsed(!isCollapsed);

  const icons = [
    {
      id: "dashboard",
      icon: <Radar size={26} />,
      label: "Dashboard",
      color: "from-violet-600 via-purple-600 to-fuchsia-600",
      bgGlow: "shadow-violet-500/30",
      hoverBg: "hover:shadow-violet-500/50",
    },
    {
      id: "all-contacts",
      icon: <Users size={26} />,
      label: "All Contacts",
      color: "from-blue-600 via-cyan-500 to-teal-500",
      bgGlow: "shadow-blue-500/30",
      hoverBg: "hover:shadow-blue-500/50",
    },
    {
      id: "roles",
      icon: <User size={26} />,
      label: "Roles",
      color: "from-emerald-600 via-green-500 to-teal-600",
      bgGlow: "shadow-emerald-500/30",
      hoverBg: "hover:shadow-emerald-500/50",
    },
    {
      id: "access-control",
      icon: <BookLock size={26} />,
      label: "Access Control",
      color: "from-amber-500 via-orange-500 to-red-500",
      bgGlow: "shadow-amber-500/30",
      hoverBg: "hover:shadow-amber-500/50",
    },
    {
      id: "activity",
      icon: <GitCompareArrows size={26} />,
      label: "Activity Logs",
      color: "from-rose-600 via-pink-500 to-fuchsia-500",
      bgGlow: "shadow-rose-500/30",
      hoverBg: "hover:shadow-rose-500/50",
    },
    {
      id: "analytics",
      icon: <BarChart3 size={26} />,
      label: "Analytics",
      color: "from-indigo-600 via-purple-500 to-blue-600",
      bgGlow: "shadow-indigo-500/30",
      hoverBg: "hover:shadow-indigo-500/50",
    },
    {
      id: "support",
      icon: <PhoneCall size={26} />,
      label: "Support",
      color: "from-green-600 via-emerald-500 to-cyan-500",
      bgGlow: "shadow-green-500/30",
      hoverBg: "hover:shadow-green-500/50",
    },
    {
      id: "messages",
      icon: <Mail size={26} />,
      label: "Messages",
      color: "from-purple-600 via-violet-500 to-indigo-600",
      bgGlow: "shadow-purple-500/30",
    },
  ];

  return (
    <aside
      className={`relative bg-gradient-to-br from-slate-950 via-gray-900 to-slate-900 text-gray-100 h-screen flex transition-all duration-700 ease-out overflow-hidden border-r border-slate-700/30 ${
        isCollapsed ? "w-20" : "w-96"
      }`}
    >
      {/* Premium Background Effects */}
      <div className="absolute inset-0 opacity-20">
        <div className="absolute top-0 left-0 w-full h-full bg-gradient-to-br from-violet-900/30 via-transparent to-blue-900/30" />
        <div className="absolute top-1/3 right-0 w-64 h-64 bg-purple-600/20 rounded-full blur-3xl animate-pulse" />
        <div className="absolute bottom-1/4 left-0 w-48 h-48 bg-cyan-600/20 rounded-full blur-2xl animate-pulse" style={{ animationDelay: '1s' }} />
      </div>

      {/* Animated Border Gradient */}
      <div className="absolute right-0 top-0 w-px h-full bg-gradient-to-b from-transparent via-slate-400/50 to-transparent" />

      {/* Left Icons Panel */}
      <div className="relative w-20 p-4 flex flex-col items-center justify-between backdrop-blur-sm">
        <div className="space-y-6 relative z-20">
          {icons.map(({ id, icon, label, color, bgGlow, hoverBg}, index) => (
            <button
              key={id}
              onClick={() => setActive(id as SidebarKey)}
              title={label}
              className={`relative p-3 rounded-2xl transition-all duration-500 group backdrop-blur-sm border transform hover:scale-110 hover:-translate-y-1 active:scale-95 ${
                active === id
                  ? `bg-gradient-to-br ${color} shadow-2xl ${bgGlow} border-white/20 scale-105`
                  : `bg-slate-800/60 hover:bg-slate-700/80 border-slate-700/50 hover:border-slate-600/70 ${hoverBg} hover:shadow-lg`
              }`}
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              {/* Active Glow Effect */}
              {active === id && (
                <div
                  className={`absolute -inset-1 bg-gradient-to-r ${color} rounded-2xl opacity-40 blur-lg animate-pulse`}
                />
              )}
              
              {/* Icon Container */}
              <div
                className={`relative z-10 transition-all duration-300 ${
                  active === id
                    ? "text-white drop-shadow-lg"
                    : "text-gray-400 group-hover:text-gray-200"
                }`}
              >
                {icon}
              </div>
              
              {/* Active Indicator */}
              {active === id && (
                <div
                  className="absolute -right-2 top-1/2 w-1.5 h-10 bg-gradient-to-b from-white via-white/90 to-white rounded-full shadow-lg transform -translate-y-1/2"
                />
              )}
              
              {/* Hover Sparkle Effect */}
              <div className="absolute -top-2 -right-2 opacity-0 group-hover:opacity-100 transition-all duration-300 animate-spin">
                <Zap size={14} className="text-yellow-400 drop-shadow-lg" />
              </div>
            </button>
          ))}
        </div>
        
        {/* Toggle Button */}
        <button
          onClick={toggleSidebar}
          title={isCollapsed ? "Expand Sidebar" : "Collapse Sidebar"}
          className="relative p-3 rounded-2xl bg-gradient-to-br from-indigo-600 via-purple-600 to-violet-600 hover:from-indigo-500 hover:via-purple-500 hover:to-violet-500 transition-all duration-500 shadow-2xl shadow-indigo-500/30 hover:shadow-indigo-500/50 border border-white/20 backdrop-blur-sm group overflow-hidden transform hover:scale-110 active:scale-95"
        >
          {/* Button Glow */}
          <div className="absolute inset-0 bg-gradient-to-br from-indigo-600 to-purple-600 opacity-30 blur-xl animate-pulse" />
          
          <div
            className={`relative text-white z-10 transition-transform duration-400 ${isCollapsed ? 'rotate-0' : 'rotate-180'}`}
          >
            <ChevronRight size={18} />
          </div>
          
          {/* Animated Background Effect */}
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700 ease-in-out" />
        </button>
      </div>

      {/* Right Content Panel */}
      <div className={`transition-all duration-700 ease-out overflow-hidden ${isCollapsed ? 'w-0 opacity-0' : 'flex-1 opacity-100'}`}>
        {!isCollapsed && (
          <div className="p-8 overflow-y-auto relative backdrop-blur-sm w-full">
            {/* Content Background */}
            <div className="absolute inset-0 bg-gradient-to-br from-slate-900/70 via-gray-800/50 to-slate-900/70 backdrop-blur-sm" />
            
            <div className="relative z-10">
              <h2 className="text-3xl font-bold capitalize mb-8 text-transparent bg-clip-text bg-gradient-to-r from-white via-gray-200 to-gray-300 flex items-center gap-4 drop-shadow-lg">
                <div className="p-3 rounded-xl bg-gradient-to-br from-violet-600/30 to-purple-600/30 backdrop-blur-sm border border-white/10 shadow-lg">
                  {icons.find((i) => i.id === active)?.icon}
                </div>
                {active.replace("-", " ")}
              </h2>

              {typeof sidebarContent[active] === "object" &&
              !Array.isArray(sidebarContent[active]) ? (
                Object.entries(sidebarContent[active] as SidebarSection).map(
                  ([title, subItems], index) => {
                    const dropdownId = `${active}-${title}-dropdown`;
                    const isOpen = openDropdowns[title] || false;
                    
                    return (
                      <div
                        key={title}
                        className="mb-6"
                        style={{ 
                          opacity: 0,
                          animation: `fadeIn 0.6s ease-out forwards`,
                          animationDelay: `${0.15 * index}s`
                        }}
                      >
                        <button
                          onClick={() => toggleDropdown(title)}
                          className="w-full flex justify-between items-center gap-4 p-6 rounded-2xl bg-gradient-to-r from-slate-800/80 via-slate-700/60 to-slate-800/80 hover:from-slate-700/90 hover:via-slate-600/80 hover:to-slate-700/90 font-semibold text-left transition-all duration-500 border border-slate-600/50 hover:border-slate-500/70 group backdrop-blur-sm shadow-xl hover:shadow-2xl transform hover:scale-[1.02] hover:translate-x-2"
                          aria-expanded={isOpen}
                          aria-controls={dropdownId}
                        >
                          <div className="flex items-center gap-5">
                            <div className="relative">
                              <div className="w-4 h-4 rounded-full bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-500 shadow-lg" />
                              <div className="absolute inset-0 w-4 h-4 rounded-full bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-500 animate-ping opacity-40" />
                            </div>
                            <span className="text-gray-100 text-lg font-semibold tracking-wide">{title}</span>
                            {title === "New Contacts" && (
                              <span className="relative bg-gradient-to-r from-indigo-600 via-purple-600 to-violet-600 text-white text-xs font-bold px-4 py-2 rounded-full shadow-lg border border-white/20 backdrop-blur-sm hover:scale-110 transition-transform duration-300">
                                <Star size={10} className="inline mr-1" />
                                {subItems.length}
                                <div className="absolute inset-0 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-full opacity-30 blur-sm animate-pulse" />
                              </span>
                            )}
                          </div>
                          <div
                            className={`text-gray-400 group-hover:text-gray-200 transition-all duration-400 ${isOpen ? 'rotate-90' : 'rotate-0'}`}
                          >
                            <ChevronRight size={22} />
                          </div>
                        </button>

                        {/* Conditional rendering based on dropdown state */}
                        {isOpen && (
                          <ul
                            id={dropdownId}
                            className="mt-4 space-y-3 overflow-hidden"
                            style={{
                              opacity: 0,
                              maxHeight: 0,
                              animation: `slideDown 0.4s ease-out forwards`
                            }}
                          >
                            {subItems.map((sub, idx) => {
                              if (
                                typeof sub === "object" &&
                                "name" in sub &&
                                "title" in sub
                              ) {
                                return (
                                  <li
                                    key={sub.name + idx}
                                    onClick={() => onSelectContact(sub)}
                                    className="flex items-center gap-5 p-5 ml-8 rounded-2xl bg-gradient-to-r from-slate-700/60 via-slate-600/40 to-slate-700/60 hover:from-slate-600/80 hover:via-slate-500/60 hover:to-slate-600/80 transition-all duration-500 cursor-pointer border border-slate-600/40 hover:border-slate-500/60 group backdrop-blur-sm shadow-lg hover:shadow-xl transform hover:scale-[1.02] hover:translate-x-3"
                                    style={{ animationDelay: `${0.08 * idx}s` }}
                                  >
                                    <div className="relative">
                                      <img
                                        src={sub.pic}
                                        alt={sub.name}
                                        className="w-14 h-14 rounded-full object-cover ring-3 ring-slate-600/60 group-hover:ring-indigo-400/80 transition-all duration-500 shadow-xl"
                                      />
                                      <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full border-3 border-slate-800 shadow-lg animate-pulse" />
                                    </div>
                                    <div className="flex flex-col">
                                      <p className="text-base font-semibold text-gray-100 group-hover:text-white transition-colors duration-300">
                                        {sub.name}
                                      </p>
                                      <p className="text-sm text-gray-400 group-hover:text-gray-300 transition-colors duration-300 font-medium">
                                        {sub.title}
                                      </p>
                                    </div>
                                    <div className="ml-auto opacity-0 group-hover:opacity-100 transition-all duration-300 transform scale-0 group-hover:scale-100">
                                      <Sparkles size={16} className="text-yellow-400 animate-spin" />
                                    </div>
                                  </li>
                                );
                              } else {
                                return (
                                  <li
                                    key={String(sub) + idx}
                                    className="flex items-center gap-4 p-5 ml-8 rounded-2xl bg-gradient-to-r from-slate-700/50 via-slate-600/30 to-slate-700/50 hover:from-slate-600/70 hover:via-slate-500/50 hover:to-slate-600/70 cursor-pointer transition-all duration-500 text-gray-300 hover:text-white group border border-slate-600/30 hover:border-slate-500/50 backdrop-blur-sm shadow-lg hover:shadow-xl transform hover:scale-[1.02] hover:translate-x-3"
                                    style={{ animationDelay: `${0.08 * idx}s` }}
                                  >
                                    <div className="relative">
                                      <div className="w-3 h-3 rounded-full bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-500 shadow-lg" />
                                      <div className="absolute inset-0 w-3 h-3 rounded-full bg-gradient-to-r from-cyan-400 to-purple-500 animate-pulse opacity-60" />
                                    </div>
                                    <span className="text-base font-medium">{sub}</span>
                                    <div className="ml-auto opacity-0 group-hover:opacity-100 transition-all duration-300 transform scale-0 group-hover:scale-100">
                                      <ChevronRight size={14} className="text-gray-400 group-hover:text-gray-200" />
                                    </div>
                                  </li>
                                );
                              }
                            })}
                          </ul>
                        )}
                      </div>
                    );
                  }
                )
              ) : (
                <ul className="space-y-4">
                  {(sidebarContent[active] as string[]).map((item, index) => (
                    <li
                      key={item}
                      className="flex items-center gap-5 p-6 rounded-2xl bg-gradient-to-r from-slate-700/60 via-slate-600/40 to-slate-700/60 hover:from-slate-600/80 hover:via-slate-500/60 hover:to-slate-600/80 cursor-pointer transition-all duration-500 text-gray-300 hover:text-white border border-slate-600/50 hover:border-slate-500/70 group backdrop-blur-sm shadow-xl hover:shadow-2xl transform hover:scale-[1.03] hover:translate-x-3"
                      style={{ 
                        opacity: 0,
                        animation: `fadeIn 0.6s ease-out forwards`,
                        animationDelay: `${0.15 * index}s`
                      }}
                    >
                      <div className="relative">
                        <div className="w-4 h-4 rounded-full bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-500 shadow-lg" />
                        <div className="absolute inset-0 w-4 h-4 rounded-full bg-gradient-to-r from-cyan-400 to-purple-500 animate-ping opacity-40" />
                      </div>
                      <span className="font-semibold text-lg tracking-wide">{item}</span>
                      <div className="ml-auto opacity-0 group-hover:opacity-100 transition-all duration-300 transform scale-0 group-hover:scale-100">
                        <ChevronRight size={18} className="text-gray-400 group-hover:text-gray-200" />
                      </div>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
        )}
      </div>

      <style jsx>{`
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideDown {
          from { opacity: 0; max-height: 0; transform: translateY(-10px); }
          to { opacity: 1; max-height: 500px; transform: translateY(0); }
        }
      `}</style>
    </aside>
  );
}